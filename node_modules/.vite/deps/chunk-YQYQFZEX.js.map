{
  "version": 3,
  "sources": ["../../vuetify/src/components/VDefaultsProvider/VDefaultsProvider.tsx", "../../vuetify/src/composables/border.ts", "../../vuetify/src/composables/variant.tsx", "../../vuetify/src/composables/router.tsx"],
  "sourcesContent": ["// Composables\nimport { provideDefaults } from '@/composables/defaults'\n\n// Utilities\nimport { defineComponent, toRefs } from 'vue' // eslint-disable-line no-restricted-imports\n\n// Types\nimport type { DefaultsOptions } from '@/composables/defaults'\nimport type { PropType } from 'vue'\n\nexport const VDefaultsProvider = defineComponent({\n  name: 'VDefaultsProvider',\n\n  props: {\n    defaults: Object as PropType<DefaultsOptions>,\n    reset: [Number, String],\n    root: Boolean,\n    scoped: Boolean,\n  },\n\n  setup (props, { slots }) {\n    const { defaults, reset, root, scoped } = toRefs(props)\n\n    provideDefaults(defaults, {\n      reset,\n      root,\n      scoped,\n    })\n\n    return () => slots.default?.()\n  },\n})\n\nexport type VDefaultsProvider = InstanceType<typeof VDefaultsProvider>\n", "// Utilities\nimport { computed, isRef } from 'vue'\nimport { getCurrentInstanceName, propsFactory } from '@/util'\n\n// Types\nexport interface BorderProps {\n  border?: boolean | number | string\n}\n\n// Composables\nexport const makeBorderProps = propsFactory({\n  border: [Boolean, Number, String],\n}, 'border')\n\nexport function useBorder (\n  props: BorderProps,\n  name = getCurrentInstanceName(),\n) {\n  const borderClasses = computed(() => {\n    const border = isRef(props) ? props.value : props.border\n    const classes: string[] = []\n\n    if (border === true || border === '') {\n      classes.push(`${name}--border`)\n    } else if (\n      typeof border === 'string' ||\n      border === 0\n    ) {\n      for (const value of String(border).split(' ')) {\n        classes.push(`border-${value}`)\n      }\n    }\n\n    return classes\n  })\n\n  return { borderClasses }\n}\n", "// Composables\nimport { useColor } from '@/composables/color'\n\n// Utilities\nimport { computed, unref } from 'vue'\nimport { getCurrentInstanceName, propsFactory } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { MaybeRef } from '@/util'\n\nexport const allowedVariants = [\n  'elevated',\n  'flat',\n  'tonal',\n  'outlined',\n  'text',\n  'plain',\n] as const\n\nexport type Variant = typeof allowedVariants[number]\n\nexport interface VariantProps {\n  color?: string\n  variant: Variant\n}\n\nexport function genOverlays (isClickable: boolean, name: string) {\n  return (\n    <>\n      { isClickable && <span key=\"overlay\" class={`${name}__overlay`} /> }\n\n      <span key=\"underlay\" class={`${name}__underlay`} />\n    </>\n  )\n}\n\nexport const makeVariantProps = propsFactory({\n  color: String,\n  variant: {\n    type: String as PropType<Variant>,\n    default: 'elevated',\n    validator: (v: any) => allowedVariants.includes(v),\n  },\n}, 'variant')\n\nexport function useVariant (\n  props: MaybeRef<VariantProps>,\n  name = getCurrentInstanceName(),\n) {\n  const variantClasses = computed(() => {\n    const { variant } = unref(props)\n    return `${name}--variant-${variant}`\n  })\n\n  const { colorClasses, colorStyles } = useColor(computed(() => {\n    const { variant, color } = unref(props)\n    return {\n      [['elevated', 'flat'].includes(variant) ? 'background' : 'text']: color,\n    }\n  }))\n\n  return { colorClasses, colorStyles, variantClasses }\n}\n", "// Utilities\nimport { getCurrentInstance, hasEvent, IN_BROWSER, propsFactory } from '@/util'\nimport {\n  computed,\n  nextTick,\n  onScopeDispose,\n  resolveDynamicComponent,\n  toRef,\n} from 'vue'\n\n// Types\nimport type { ComputedRef, PropType, Ref, SetupContext } from 'vue'\nimport type {\n  RouterLink as _RouterLink,\n  useLink as _useLink,\n  NavigationGuardNext,\n  RouteLocationNormalizedLoaded,\n  RouteLocationRaw,\n  Router,\n  UseLinkOptions,\n} from 'vue-router'\nimport type { EventProp } from '@/util'\n\nexport function useRoute (): Ref<RouteLocationNormalizedLoaded | undefined> {\n  const vm = getCurrentInstance('useRoute')\n\n  return computed(() => vm?.proxy?.$route)\n}\n\nexport function useRouter (): Router | undefined {\n  return getCurrentInstance('useRouter')?.proxy?.$router\n}\n\nexport interface LinkProps {\n  href: string | undefined\n  replace: boolean | undefined\n  to: RouteLocationRaw | undefined\n  exact: boolean | undefined\n}\n\nexport interface LinkListeners {\n  onClick?: EventProp | undefined\n  onClickOnce?: EventProp | undefined\n}\n\nexport interface UseLink extends Omit<Partial<ReturnType<typeof _useLink>>, 'href'> {\n  isLink: ComputedRef<boolean>\n  isClickable: ComputedRef<boolean>\n  href: Ref<string | undefined>\n}\n\nexport function useLink (props: LinkProps & LinkListeners, attrs: SetupContext['attrs']): UseLink {\n  const RouterLink = resolveDynamicComponent('RouterLink') as typeof _RouterLink | string\n\n  const isLink = computed(() => !!(props.href || props.to))\n  const isClickable = computed(() => {\n    return isLink?.value || hasEvent(attrs, 'click') || hasEvent(props, 'click')\n  })\n\n  if (typeof RouterLink === 'string') {\n    return {\n      isLink,\n      isClickable,\n      href: toRef(props, 'href'),\n    }\n  }\n\n  const link = props.to ? RouterLink.useLink(props as UseLinkOptions) : undefined\n\n  return {\n    isLink,\n    isClickable,\n    route: link?.route,\n    navigate: link?.navigate,\n    isActive: link && computed(() => props.exact ? link.isExactActive?.value : link.isActive?.value),\n    href: computed(() => props.to ? link?.route.value.href : props.href),\n  }\n}\n\nexport const makeRouterProps = propsFactory({\n  href: String,\n  replace: Boolean,\n  to: [String, Object] as PropType<RouteLocationRaw>,\n  exact: Boolean,\n}, 'router')\n\nlet inTransition = false\nexport function useBackButton (router: Router | undefined, cb: (next: NavigationGuardNext) => void) {\n  let popped = false\n  let removeBefore: (() => void) | undefined\n  let removeAfter: (() => void) | undefined\n\n  if (IN_BROWSER) {\n    nextTick(() => {\n      window.addEventListener('popstate', onPopstate)\n      removeBefore = router?.beforeEach((to, from, next) => {\n        if (!inTransition) {\n          setTimeout(() => popped ? cb(next) : next())\n        } else {\n          popped ? cb(next) : next()\n        }\n        inTransition = true\n      })\n      removeAfter = router?.afterEach(() => {\n        inTransition = false\n      })\n    })\n    onScopeDispose(() => {\n      window.removeEventListener('popstate', onPopstate)\n      removeBefore?.()\n      removeAfter?.()\n    })\n  }\n\n  function onPopstate (e: PopStateEvent) {\n    if (e.state?.replaced) return\n\n    popped = true\n    setTimeout(() => (popped = false))\n  }\n}\n"],
  "mappings": "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",
  "names": ["VDefaultsProvider", "defineComponent", "name", "props", "defaults", "Object", "reset", "Number", "String", "root", "Boolean", "scoped", "setup", "slots", "toRefs", "provideDefaults", "default", "makeBorderProps", "propsFactory", "border", "Boolean", "Number", "String", "useBorder", "props", "name", "getCurrentInstanceName", "borderClasses", "computed", "isRef", "value", "classes", "push", "split", "allowedVariants", "genOverlays", "isClickable", "name", "makeVariantProps", "propsFactory", "color", "String", "variant", "type", "default", "validator", "v", "includes", "useVariant", "props", "getCurrentInstanceName", "variantClasses", "computed", "unref", "colorClasses", "colorStyles", "useColor", "useLink", "props", "attrs", "RouterLink", "resolveDynamicComponent", "isLink", "computed", "href", "to", "isClickable", "value", "hasEvent", "toRef", "link", "undefined", "route", "navigate", "isActive", "exact", "isExactActive", "makeRouterProps", "propsFactory", "String", "replace", "Boolean", "Object"]
}
