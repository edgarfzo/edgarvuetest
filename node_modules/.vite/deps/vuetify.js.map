{
  "version": 3,
  "sources": ["../../vuetify/src/composables/display.ts", "../../vuetify/src/framework.ts"],
  "sourcesContent": ["// Utilities\nimport { inject, reactive, ref, toRefs, watchEffect } from 'vue'\nimport { mergeDeep } from '@/util'\n\n// Globals\nimport { IN_BROWSER, SUPPORTS_TOUCH } from '@/util/globals'\n\n// Types\nimport type { InjectionKey, Ref } from 'vue'\n\nexport type DisplayBreakpoint = keyof DisplayThresholds\n\nexport interface DisplayThresholds {\n  xs: number\n  sm: number\n  md: number\n  lg: number\n  xl: number\n  xxl: number\n}\n\nexport interface DisplayOptions {\n  mobileBreakpoint?: number | DisplayBreakpoint\n  thresholds?: Partial<DisplayThresholds>\n}\n\nexport interface InternalDisplayOptions {\n  mobileBreakpoint: number | DisplayBreakpoint\n  thresholds: DisplayThresholds\n}\n\nexport interface DisplayPlatform {\n  android: boolean\n  ios: boolean\n  cordova: boolean\n  electron: boolean\n  chrome: boolean\n  edge: boolean\n  firefox: boolean\n  opera: boolean\n  win: boolean\n  mac: boolean\n  linux: boolean\n  touch: boolean\n  ssr: boolean\n}\n\nexport interface DisplayInstance {\n  xs: Ref<boolean>\n  sm: Ref<boolean>\n  md: Ref<boolean>\n  lg: Ref<boolean>\n  xl: Ref<boolean>\n  xxl: Ref<boolean>\n  smAndUp: Ref<boolean>\n  mdAndUp: Ref<boolean>\n  lgAndUp: Ref<boolean>\n  xlAndUp: Ref<boolean>\n  smAndDown: Ref<boolean>\n  mdAndDown: Ref<boolean>\n  lgAndDown: Ref<boolean>\n  xlAndDown: Ref<boolean>\n  name: Ref<DisplayBreakpoint>\n  height: Ref<number>\n  width: Ref<number>\n  mobile: Ref<boolean>\n  mobileBreakpoint: Ref<number | DisplayBreakpoint>\n  platform: Ref<DisplayPlatform>\n  thresholds: Ref<DisplayThresholds>\n\n  /** @internal */\n  ssr: boolean\n\n  update (): void\n}\n\nexport const DisplaySymbol: InjectionKey<DisplayInstance> = Symbol.for('vuetify:display')\n\nconst defaultDisplayOptions: DisplayOptions = {\n  mobileBreakpoint: 'lg',\n  thresholds: {\n    xs: 0,\n    sm: 600,\n    md: 960,\n    lg: 1280,\n    xl: 1920,\n    xxl: 2560,\n  },\n}\n\nconst parseDisplayOptions = (options: DisplayOptions = defaultDisplayOptions) => {\n  return mergeDeep(defaultDisplayOptions, options) as InternalDisplayOptions\n}\n\nfunction getClientWidth (isHydrate?: boolean) {\n  return IN_BROWSER && !isHydrate\n    ? window.innerWidth\n    : 0\n}\n\nfunction getClientHeight (isHydrate?: boolean) {\n  return IN_BROWSER && !isHydrate\n    ? window.innerHeight\n    : 0\n}\n\nfunction getPlatform (): DisplayPlatform {\n  const userAgent = IN_BROWSER ? window.navigator.userAgent : 'ssr'\n\n  function match (regexp: RegExp) {\n    return Boolean(userAgent.match(regexp))\n  }\n\n  const android = match(/android/i)\n  const ios = match(/iphone|ipad|ipod/i)\n  const cordova = match(/cordova/i)\n  const electron = match(/electron/i)\n  const chrome = match(/chrome/i)\n  const edge = match(/edge/i)\n  const firefox = match(/firefox/i)\n  const opera = match(/opera/i)\n  const win = match(/win/i)\n  const mac = match(/mac/i)\n  const linux = match(/linux/i)\n  const ssr = match(/ssr/i)\n\n  return {\n    android,\n    ios,\n    cordova,\n    electron,\n    chrome,\n    edge,\n    firefox,\n    opera,\n    win,\n    mac,\n    linux,\n    touch: SUPPORTS_TOUCH,\n    ssr,\n  }\n}\n\nexport function createDisplay (options?: DisplayOptions, ssr?: boolean): DisplayInstance {\n  const { thresholds, mobileBreakpoint } = parseDisplayOptions(options)\n\n  const height = ref(getClientHeight(ssr))\n  const platform = getPlatform()\n  const state = reactive({} as DisplayInstance)\n  const width = ref(getClientWidth(ssr))\n\n  function update () {\n    height.value = getClientHeight()\n    width.value = getClientWidth()\n  }\n\n  // eslint-disable-next-line max-statements\n  watchEffect(() => {\n    const xs = width.value < thresholds.sm\n    const sm = width.value < thresholds.md && !xs\n    const md = width.value < thresholds.lg && !(sm || xs)\n    const lg = width.value < thresholds.xl && !(md || sm || xs)\n    const xl = width.value < thresholds.xxl && !(lg || md || sm || xs)\n    const xxl = width.value >= thresholds.xxl\n    const name =\n      xs ? 'xs'\n      : sm ? 'sm'\n      : md ? 'md'\n      : lg ? 'lg'\n      : xl ? 'xl'\n      : 'xxl'\n    const breakpointValue = typeof mobileBreakpoint === 'number' ? mobileBreakpoint : thresholds[mobileBreakpoint]\n    const mobile = !platform.ssr\n      ? width.value < breakpointValue\n      : platform.android || platform.ios || platform.opera\n\n    state.xs = xs\n    state.sm = sm\n    state.md = md\n    state.lg = lg\n    state.xl = xl\n    state.xxl = xxl\n    state.smAndUp = !xs\n    state.mdAndUp = !(xs || sm)\n    state.lgAndUp = !(xs || sm || md)\n    state.xlAndUp = !(xs || sm || md || lg)\n    state.smAndDown = !(md || lg || xl || xxl)\n    state.mdAndDown = !(lg || xl || xxl)\n    state.lgAndDown = !(xl || xxl)\n    state.xlAndDown = !xxl\n    state.name = name\n    state.height = height.value\n    state.width = width.value\n    state.mobile = mobile\n    state.mobileBreakpoint = mobileBreakpoint\n    state.platform = platform\n    state.thresholds = thresholds\n  })\n\n  if (IN_BROWSER) {\n    window.addEventListener('resize', update, { passive: true })\n  }\n\n  return { ...toRefs(state), update, ssr: !!ssr }\n}\n\nexport function useDisplay () {\n  const display = inject(DisplaySymbol)\n\n  if (!display) throw new Error('Could not find Vuetify display injection')\n\n  return display\n}\n", "// Composables\nimport { createDefaults, DefaultsSymbol } from '@/composables/defaults'\nimport { createDisplay, DisplaySymbol } from '@/composables/display'\nimport { createIcons, IconSymbol } from '@/composables/icons'\nimport { createLocale, LocaleSymbol } from '@/composables/locale'\nimport { createTheme, ThemeSymbol } from '@/composables/theme'\n\n// Utilities\nimport { defineComponent, getUid, IN_BROWSER, mergeDeep } from '@/util'\nimport { nextTick, reactive } from 'vue'\n\n// Types\nimport type { App, ComponentPublicInstance, InjectionKey } from 'vue'\nimport type { DefaultsOptions } from '@/composables/defaults'\nimport type { DisplayOptions } from '@/composables/display'\nimport type { IconOptions } from '@/composables/icons'\nimport type { LocaleOptions, RtlOptions } from '@/composables/locale'\nimport type { ThemeOptions } from '@/composables/theme'\n\nexport * from './composables'\n\nexport interface VuetifyOptions {\n  aliases?: Record<string, any>\n  blueprint?: Blueprint\n  components?: Record<string, any>\n  directives?: Record<string, any>\n  defaults?: DefaultsOptions\n  display?: DisplayOptions\n  theme?: ThemeOptions\n  icons?: IconOptions\n  locale?: LocaleOptions & RtlOptions\n  ssr?: boolean\n}\n\nexport interface Blueprint extends Omit<VuetifyOptions, 'blueprint'> {}\n\nexport function createVuetify (vuetify: VuetifyOptions = {}) {\n  const { blueprint, ...rest } = vuetify\n  const options = mergeDeep(blueprint, rest)\n  const {\n    aliases = {},\n    components = {},\n    directives = {},\n  } = options\n\n  const defaults = createDefaults(options.defaults)\n  const display = createDisplay(options.display, options.ssr)\n  const theme = createTheme(options.theme)\n  const icons = createIcons(options.icons)\n  const locale = createLocale(options.locale)\n\n  const install = (app: App) => {\n    for (const key in directives) {\n      app.directive(key, directives[key])\n    }\n\n    for (const key in components) {\n      app.component(key, components[key])\n    }\n\n    for (const key in aliases) {\n      app.component(key, defineComponent({\n        ...aliases[key],\n        name: key,\n        aliasName: aliases[key].name,\n      }))\n    }\n\n    theme.install(app)\n\n    app.provide(DefaultsSymbol, defaults)\n    app.provide(DisplaySymbol, display)\n    app.provide(ThemeSymbol, theme)\n    app.provide(IconSymbol, icons)\n    app.provide(LocaleSymbol, locale)\n\n    if (IN_BROWSER && options.ssr) {\n      if (app.$nuxt) {\n        app.$nuxt.hook('app:suspense:resolve', () => {\n          display.update()\n        })\n      } else {\n        const { mount } = app\n        app.mount = (...args) => {\n          const vm = mount(...args)\n          nextTick(() => display.update())\n          app.mount = mount\n          return vm\n        }\n      }\n    }\n\n    getUid.reset()\n\n    if (typeof __VUE_OPTIONS_API__ !== 'boolean' || __VUE_OPTIONS_API__) {\n      app.mixin({\n        computed: {\n          $vuetify () {\n            return reactive({\n              defaults: inject.call(this, DefaultsSymbol),\n              display: inject.call(this, DisplaySymbol),\n              theme: inject.call(this, ThemeSymbol),\n              icons: inject.call(this, IconSymbol),\n              locale: inject.call(this, LocaleSymbol),\n            })\n          },\n        },\n      })\n    }\n  }\n\n  return {\n    install,\n    defaults,\n    display,\n    theme,\n    icons,\n    locale,\n  }\n}\n\nexport const version = __VUETIFY_VERSION__\ncreateVuetify.version = version\n\n// Vue's inject() can only be used in setup\nfunction inject (this: ComponentPublicInstance, key: InjectionKey<any> | string) {\n  const vm = this.$\n\n  const provides = vm.parent?.provides ?? vm.vnode.appContext?.provides\n\n  if (provides && (key as any) in provides) {\n    return provides[(key as string)]\n  }\n}\n"],
  "mappings": "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",
  "names": ["DisplaySymbol", "Symbol", "for", "defaultDisplayOptions", "mobileBreakpoint", "thresholds", "xs", "sm", "md", "lg", "xl", "xxl", "parseDisplayOptions", "options", "mergeDeep", "getClientWidth", "isHydrate", "IN_BROWSER", "window", "innerWidth", "getClientHeight", "innerHeight", "getPlatform", "userAgent", "navigator", "match", "regexp", "Boolean", "android", "ios", "cordova", "electron", "chrome", "edge", "firefox", "opera", "win", "mac", "linux", "ssr", "touch", "SUPPORTS_TOUCH", "createDisplay", "height", "ref", "platform", "state", "reactive", "width", "update", "value", "watchEffect", "name", "breakpointValue", "mobile", "smAndUp", "mdAndUp", "lgAndUp", "xlAndUp", "smAndDown", "mdAndDown", "lgAndDown", "xlAndDown", "addEventListener", "passive", "toRefs", "useDisplay", "display", "inject", "Error", "createVuetify", "vuetify", "blueprint", "rest", "options", "mergeDeep", "aliases", "components", "directives", "defaults", "createDefaults", "display", "createDisplay", "ssr", "theme", "createTheme", "icons", "createIcons", "locale", "createLocale", "install", "app", "key", "directive", "component", "defineComponent", "name", "aliasName", "provide", "DefaultsSymbol", "DisplaySymbol", "ThemeSymbol", "IconSymbol", "LocaleSymbol", "IN_BROWSER", "$nuxt", "hook", "update", "mount", "vm", "nextTick", "getUid", "reset", "__VUE_OPTIONS_API__", "mixin", "computed", "$vuetify", "reactive", "inject", "call", "version", "$", "provides", "parent", "vnode", "appContext"]
}
